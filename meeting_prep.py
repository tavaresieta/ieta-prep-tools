import streamlit as st
from pathlib import Path
from PyPDF2 import PdfReader
from docx import Document
import urllib.parse  # NOVO: Para criar links do ChatGPT

st.set_page_config(
    page_title="IETA Wizard",
    page_icon="üßô",
    layout="wide"
)

# Fun√ß√£o para carregar documentos COM MAIS CONTE√öDO
@st.cache_data
def load_all_documents():
    """Carrega documentos com m√°ximo conte√∫do poss√≠vel"""
    docs_folder = Path("documents")
    all_content = {}
    
    if not docs_folder.exists():
        return {}
    
    for file_path in docs_folder.iterdir():
        if file_path.is_file():
            try:
                content = ""
                
                if file_path.suffix.lower() == '.pdf':
                    reader = PdfReader(file_path)
                    for page in reader.pages:
                        content += page.extract_text()
                
                elif file_path.suffix.lower() == '.docx':
                    doc = Document(file_path)
                    content = "\n".join([p.text for p in doc.paragraphs])
                
                elif file_path.suffix.lower() == '.txt':
                    content = file_path.read_text(encoding='utf-8')
                
                if content.strip():
                    all_content[file_path.name] = {
                        'full_content': content,  # Conte√∫do completo
                        'size_kb': len(content) / 1024,
                        'char_count': len(content)
                    }
                    
            except Exception as e:
                st.sidebar.warning(f"‚ö†Ô∏è Erro: {file_path.name}")
    
    return all_content

# T√≠tulo e menu
st.title("üßô IETA Wizard")

# Menu de ferramentas
tool_choice = st.radio(
    "Escolha a ferramenta:",
    ["üéØ Meeting Prep", "üé§ Panel Prep"],
    horizontal=True
)

# Sidebar
with st.sidebar:
    st.header("üìä Base de Conhecimento")
    
    # BOT√ÉO DE RELOAD
    if st.button("üîÑ Recarregar Documentos", use_container_width=True, type="primary"):
        st.cache_data.clear()
        st.success("‚úÖ Base atualizada!")
        st.rerun()
    
    st.markdown("---")
    
    # Carregar documentos
    documents = load_all_documents()
    
    if documents:
        st.success(f"‚úÖ {len(documents)} documentos")
        
        # Estat√≠sticas
        total_chars = sum(doc['char_count'] for doc in documents.values())
        total_kb = sum(doc['size_kb'] for doc in documents.values())
        
        st.metric("Total de caracteres", f"{total_chars:,}")
        st.metric("Tamanho total", f"{total_kb:.1f} KB")
        
        # Lista de documentos
        with st.expander("üìÑ Ver documentos"):
            for doc_name, doc_data in sorted(documents.items()):
                st.text(f"‚Ä¢ {doc_name}")
                st.caption(f"  {doc_data['char_count']:,} chars")
    else:
        st.error("‚ùå Nenhum documento encontrado!")
        st.info("Adicione arquivos PDF, DOCX ou TXT na pasta 'documents/'")
    
    st.markdown("---")
    st.caption("üåç IETA Brazil Initiative")

# Main content
if not documents:
    st.warning("‚ö†Ô∏è Adicione documentos √† pasta 'documents/' e clique em 'Recarregar Documentos'")
    st.stop()

# ==============================================================================
# MEETING PREP
# ==============================================================================

if tool_choice == "üéØ Meeting Prep":
    st.markdown("### Prepara√ß√£o para Reuni√µes")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        organization = st.text_input(
            "**Organiza√ß√£o/Participantes:**",
            placeholder="Ex: IBP - Instituto Brasileiro do Petr√≥leo"
        )
    
    with col2:
        meeting_date = st.date_input("**Data:**")
    
    topics = st.text_area(
        "**T√≥picos principais:**",
        placeholder="Ex: SBCE, CBAM, CBIOs, certificados de biometano",
        height=100
    )
    
    col3, col4 = st.columns(2)
    
    with col3:
        meeting_type = st.selectbox(
            "**Tipo:**",
            ["Reuni√£o de Mapeamento", "Painel", "Call T√©cnico", "Workshop", "Bilateral"]
        )
    
    with col4:
        detail_level = st.select_slider(
            "**Detalhe:**",
            options=["R√°pido", "Padr√£o", "Completo"],
            value="Padr√£o"
        )
    
    objectives = st.text_area(
        "**Objetivos (opcional):**",
        placeholder="Ex: Mapear prioridades do setor, identificar oportunidades",
        height=80
    )
    
    st.markdown("---")
    
    if st.button("üöÄ Gerar Briefing", type="primary", use_container_width=True):
        
        if not organization or not topics:
            st.error("‚ö†Ô∏è Preencha pelo menos Organiza√ß√£o e T√≥picos")
        else:
            with st.spinner("üìù Preparando briefing com documentos completos..."):
                
                # Preparar contexto COM MUITO MAIS CONTE√öDO
                docs_context = []
                
                for doc_name, doc_data in documents.items():
                    # Pegar primeiros 12.000 caracteres de cada doc (era 2.500!)
                    content = doc_data['full_content'][:12000]
                    
                    docs_context.append(f"""
{'='*70}
DOCUMENTO: {doc_name}
Tamanho: {doc_data['char_count']:,} caracteres
{'='*70}

{content}

""")
                
                # Limitar contexto total para n√£o explodir (m√°x 80k chars)
                full_context = "\n".join(docs_context)[:80000]
                
                # Ajustar se√ß√µes por n√≠vel
                if detail_level == "R√°pido":
                    sections = """
1. üéØ Objetivos Estrat√©gicos (2-3 pontos)
2. üí° Posi√ß√µes IETA Relevantes (cite documentos espec√≠ficos)
3. üó£Ô∏è 3 Talking Points Principais
"""
                elif detail_level == "Padr√£o":
                    sections = """
1. üéØ Objetivos Estrat√©gicos IETA
2. üìä Contexto sobre a Organiza√ß√£o
3. üí° Posi√ß√µes IETA Relevantes (SEMPRE cite o documento fonte)
4. üó£Ô∏è 5 Talking Points Estrat√©gicos
5. ‚ùì 3-4 Perguntas Prov√°veis e Respostas
"""
                else:  # Completo
                    sections = """
1. üéØ Objetivos Estrat√©gicos IETA
2. üìä Contexto Detalhado sobre a Organiza√ß√£o
3. üí° Posi√ß√µes IETA Relevantes (com cita√ß√µes literais dos documentos)
4. üó£Ô∏è 7 Talking Points Estrat√©gicos
5. ‚ùì 5+ Perguntas Prov√°veis e Respostas Preparadas
6. ‚ö†Ô∏è Considera√ß√µes Estrat√©gicas (Oportunidades e Riscos)
7. üìã Action Items para Follow-up
"""
                
                # Criar prompt melhorado
                prompt = f"""Voc√™ √© um assistente especializado da IETA (International Emissions Trading Association) Brasil.

REGRAS CR√çTICAS DE RESPOSTA:
1. Use APENAS informa√ß√µes dos documentos fornecidos abaixo
2. SEMPRE cite a fonte: "Segundo [nome do documento], ..."
3. Use dados num√©ricos EXATOS dos documentos (n√£o invente)
4. Se n√£o houver informa√ß√£o espec√≠fica, diga claramente
5. Priorize informa√ß√µes de Position Papers oficiais
6. Quando m√∫ltiplos documentos mencionarem algo, sintetize mostrando converg√™ncias

INFORMA√á√ïES DA REUNI√ÉO:
- Organiza√ß√£o: {organization}
- Data: {meeting_date}
- Tipo: {meeting_type}
- T√≥picos: {topics}
- Objetivos: {objectives if objectives else "Mapear oportunidades e alinhar posi√ß√µes"}

DOCUMENTOS IETA COMPLETOS ({len(documents)} documentos, ~{len(full_context):,} caracteres):

{full_context}

TAREFA:
Crie um briefing executivo estruturado para esta reuni√£o.

ESTRUTURA DO BRIEFING:
{sections}

FORMATO:
- Use markdown com headers (##, ###) e bullet points
- Cada afirma√ß√£o importante deve incluir [Fonte: nome_do_documento]
- Seja espec√≠fico e pr√°tico
- Foque em informa√ß√µes ACION√ÅVEIS

BRIEFING:
"""
                
                # Mostrar resultados
                st.success("‚úÖ Prompt gerado com documentos completos!")
                
                # Estat√≠sticas
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                
                with col_stat1:
                    st.metric("Documentos inclu√≠dos", len(documents))
                
                with col_stat2:
                    st.metric("Caracteres no contexto", f"{len(full_context):,}")
                
                with col_stat3:
                    st.metric("Tokens aproximados", f"{len(full_context)//4:,}")
                
                st.markdown("---")
                
                # Mostrar prompt
                st.markdown("### üìã Prompt Gerado (Copie e Cole no ChatGPT/Claude)")
                
                st.text_area(
                    "Prompt completo:",
                    prompt,
                    height=400,
                    help="Copie todo este texto e cole no ChatGPT ou Claude.ai"
                )
                
                # NOVO: Bot√µes de a√ß√£o melhorados
                # Encode do prompt para URL do ChatGPT
                encoded_prompt = urllib.parse.quote(prompt[:2000])  # Limite de URL
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    st.download_button(
                        "üì• Baixar Prompt",
                        prompt,
                        file_name=f"briefing_{organization.replace(' ', '_')}_{meeting_date}.txt",
                        use_container_width=True
                    )
                
                with col_btn2:
                    # Bot√£o para abrir ChatGPT
                    st.markdown(f"""
                    <a href="https://chat.openai.com/?q={encoded_prompt}" target="_blank">
                        <button style="
                            width: 100%;
                            height: 43px;
                            padding: 0.5rem;
                            background-color: #10a37f;
                            color: white;
                            border: none;
                            border-radius: 0.5rem;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                        ">
                            ü§ñ Abrir no ChatGPT
                        </button>
                    </a>
                    """, unsafe_allow_html=True)
                
                st.info("üí° **Dica:** O bot√£o ChatGPT abre com parte do prompt. Para prompt completo, copie da caixa acima!")

# ==============================================================================
# PANEL PREP
# ==============================================================================

elif tool_choice == "üé§ Panel Prep":
    st.markdown("### Prepara√ß√£o para Pain√©is")
    
    col1, col2 = st.columns(2)
    
    with col1:
        panel_title = st.text_input(
            "**T√≠tulo do Painel:**",
            placeholder="Ex: Descarboniza√ß√£o da Avia√ß√£o e Mercados de Carbono"
        )
        
        event_name = st.text_input(
            "**Evento:**",
            placeholder="Ex: Confer√™ncia Anual Avia√ß√£o Sustent√°vel"
        )
    
    with col2:
        panel_date = st.date_input("**Data:**")
        
        your_role = st.selectbox(
            "**Seu papel:**",
            ["Painelista", "Moderador", "Keynote Speaker"]
        )
    
    panel_topic = st.text_area(
        "**Tema/quest√£o do painel:**",
        placeholder="Ex: Como SBCE e CBAM impactam avia√ß√£o? Oportunidades e desafios.",
        height=100
    )
    
    col3, col4 = st.columns(2)
    
    with col3:
        duration = st.selectbox(
            "**Dura√ß√£o da sua fala:**",
            ["5 minutos", "10 minutos", "15 minutos", "20 minutos"]
        )
    
    with col4:
        prep_level = st.select_slider(
            "**Prepara√ß√£o:**",
            options=["B√°sico", "Intermedi√°rio", "Avan√ßado"],
            value="Intermedi√°rio"
        )
    
    audience = st.text_input(
        "**P√∫blico esperado:**",
        placeholder="Ex: Executivos de avia√ß√£o, reguladores"
    )
    
    other_panelists = st.text_area(
        "**Outros painelistas (opcional):**",
        placeholder="Ex: Representante da ANAC, CEO de companhia a√©rea, especialista em SAF",
        height=80
    )
    
    key_message = st.text_area(
        "**Mensagem-chave que quer transmitir (opcional):**",
        placeholder="Ex: Brasil pode liderar transi√ß√£o verde na avia√ß√£o atrav√©s de SAF e mercados bem desenhados",
        height=80
    )
    
    st.markdown("---")
    
    if st.button("üé§ Gerar Prepara√ß√£o para Painel", type="primary", use_container_width=True):
        
        if not panel_title or not panel_topic:
            st.error("‚ö†Ô∏è Preencha pelo menos T√≠tulo e Tema do Painel")
        else:
            with st.spinner("üìù Preparando material para painel..."):
                
                # Preparar contexto (mesmo sistema do Meeting Prep)
                docs_context = []
                
                for doc_name, doc_data in documents.items():
                    content = doc_data['full_content'][:12000]
                    
                    docs_context.append(f"""
{'='*70}
DOCUMENTO: {doc_name}
{'='*70}

{content}

""")
                
                full_context = "\n".join(docs_context)[:80000]
                
                # Ajustar por n√≠vel
                if prep_level == "B√°sico":
                    sections = """
1. üéØ Mensagem Central (1 frase impactante)
2. üí° 3 Pontos-Chave para Sua Fala
3. üìä 2-3 Dados de Apoio dos documentos
4. üé§ Sugest√£o de Abertura
5. üîö Sugest√£o de Fechamento
"""
                elif prep_level == "Intermedi√°rio":
                    sections = """
1. üéØ Mensagem Central e Narrativa
2. üí° 5 Pontos Principais Estruturados
3. üìä Dados e Evid√™ncias (com fontes)
4. üé§ Abertura Impactante
5. üó£Ô∏è Poss√≠veis Perguntas do Moderador/Audi√™ncia
6. üîö Fechamento Memor√°vel
7. ‚è∞ Estrutura por Tempo ({duration})
"""
                else:  # Avan√ßado
                    sections = """
1. üéØ Narrativa Estrat√©gica Completa
2. üí° 7-10 Pontos de Argumenta√ß√£o
3. üìä Dados, Evid√™ncias e Cases (citando documentos)
4. üé§ M√∫ltiplas Op√ß√µes de Abertura
5. üó£Ô∏è Banco de Q&A (10+ perguntas)
6. üí¨ Soundbites para M√≠dia/Redes
7. üîö Varia√ß√µes de Fechamento
8. ‚è∞ Roteiro Minuto a Minuto
9. üé≠ Gest√£o de Debates e Contra-argumentos
"""
                
                prompt = f"""Voc√™ √© um coach de comunica√ß√£o especializado em pain√©is sobre mercados de carbono para a IETA.

REGRAS CR√çTICAS:
1. Use APENAS informa√ß√µes dos documentos IETA fornecidos
2. Cite fontes espec√≠ficas: [Fonte: nome_documento]
3. Foque em comunica√ß√£o CLARA e IMPACTANTE
4. Adapte ao tempo dispon√≠vel ({duration})
5. Considere o p√∫blico: {audience if audience else "profissionais do setor"}

PAINEL:
- T√≠tulo: {panel_title}
- Evento: {event_name}
- Data: {panel_date}
- Seu papel: {your_role}
- Dura√ß√£o: {duration}
- Tema: {panel_topic}
- P√∫blico: {audience if audience else "profissionais do setor"}
- Outros painelistas: {other_panelists if other_panelists else "N√£o informado"}
- Mensagem-chave desejada: {key_message if key_message else "A definir com base nos documentos IETA"}

DOCUMENTOS IETA ({len(documents)} documentos):

{full_context}

TAREFA:
Crie uma prepara√ß√£o completa e pr√°tica para este painel.

ESTRUTURA:
{sections}

DIRETRIZES:
- Seja PR√ÅTICO e ACION√ÅVEL
- Pense em storytelling, n√£o s√≥ dados
- Inclua transi√ß√µes naturais
- Prepare para imprevistos
- Use dados concretos dos documentos IETA

PREPARA√á√ÉO:
"""
                
                # Mostrar resultados
                st.success("‚úÖ Prepara√ß√£o estruturada!")
                
                col_stat1, col_stat2 = st.columns(2)
                
                with col_stat1:
                    st.metric("Documentos", len(documents))
                
                with col_stat2:
                    st.metric("Contexto", f"{len(full_context):,} chars")
                
                st.markdown("---")
                
                st.markdown("### üé§ Prompt para Panel Prep")
                
                st.text_area(
                    "Prompt completo:",
                    prompt,
                    height=400
                )
                
                # NOVO: Bot√µes melhorados para Panel Prep tamb√©m
                encoded_prompt = urllib.parse.quote(prompt[:2000])
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    st.download_button(
                        "üì• Baixar Prompt",
                        prompt,
                        file_name=f"panel_{panel_title[:30].replace(' ', '_')}_{panel_date}.txt",
                        use_container_width=True
                    )
                
                with col_btn2:
                    st.markdown(f"""
                    <a href="https://chat.openai.com/?q={encoded_prompt}" target="_blank">
                        <button style="
                            width: 100%;
                            height: 43px;
                            padding: 0.5rem;
                            background-color: #10a37f;
                            color: white;
                            border: none;
                            border-radius: 0.5rem;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                        ">
                            ü§ñ Abrir no ChatGPT
                        </button>
                    </a>
                    """, unsafe_allow_html=True)
                
                st.info("üí° **Dica:** O bot√£o ChatGPT abre com parte do prompt. Para prompt completo, copie da caixa acima!")

# Rodap√©
st.markdown("---")
st.caption("üí° **Dica:** Copie o prompt gerado e cole no ChatGPT Plus ou Claude.ai para melhores resultados!")
st.caption("üîÑ Use 'Recarregar Documentos' sempre que adicionar novos arquivos √† pasta.")
